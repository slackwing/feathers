#!/bin/bash

alias countts='find src -type f \( -name "*.ts" -o -name "*.tsx" \) -exec cat {} + | wc -l'
# Usage: echo '1107744747195026328\n9398816220039497741' | Uuid2UUID
Uuid2UUID() {
    awk 'NR==1 { msb = $0 }
         NR==2 { lsb = $0 }
         END {
             msb_hex = sprintf("%016x", msb)
             lsb_hex = sprintf("%016x", lsb)
             uuid = msb_hex lsb_hex
             formatted_uuid = substr(uuid, 1, 8) "-" substr(uuid, 9, 4) "-" substr(uuid, 13, 4) "-" substr(uuid, 17, 4) "-" substr(uuid, 21, 12)
             print tolower(formatted_uuid)
         }'
}
alias jcgs="cd ~/src/slackwing/java-concurrent-grpc-script"
alias nvc="cd ~/.config/nvim ; nvim ."
alias nvcii="cd ~/.config/nvim-ii ; nvim ."
alias nvciii="cd ~/.config/nvim-iii ; nvim ."
alias nv="NVIM_APPNAME=nvim nvim ."
alias nvi="NVIM_APPNAME=nvim nvim ."
alias nvii="NVIM_APPNAME=nvim-ii nvim"
alias nviii="NVIM_APPNAME=nvim-iii nvim"
alias ams="cd ~/src/spotify-nvim/ads-measurements/"
alias api="cd ~/src/spotify-nvim/ads-api/"
alias bff="cd ~/src/spotify-nvim/adstudio-bff/"
alias cs="cd ~/src/spotify-nvim/campaign-service/"
alias cdetp="cd /Users/acheong/src/nvim/exchange-trading-platform/be/etp-backend/"
alias tlsp="tail -f ~/.local/state/nvim/lsp.log"
alias magic="mvn clean compile install package verify -DskipTests ; echo ''; echo 'Did you remember to close nvim?'"
alias magicrfa="magic -rf :ads-api-data-model"
alias magicrfs="magic -rf :ads-api-server"
alias adsapisetup='echo "\n
  mvn clean install -DskipTests\n
  mvn generate-sources\n
  mvn compile\n
  make db"'
alias adsapifixusedunused='mvn -U clean install -DskipTests'
alias adsapifixmesh='npm install -g openapi-to-graphql-cli@latest'
alias buildadsapi='mvn -U clean install -DskipTests'
alias reload="mvn dependency:sources ; mvn dependency:resolve"
# Forgot what this was for...
# alias preset="rm ~/.config/nvim/plugin/packer_compiled.lua ; nvim ~/.config/nvim/lua/slackwing/packer.lua"
# alias vimvim='/usr/bin/vim'
# alias vim='nvim'
run() {
  # e.g. com.psa.Main
  mvn exec:java -Dexec.mainClass="$1"
}
test() {
  # $1 = module, e.g. ads-api-server
  # $2 = class, e.g. ExperimentMapStructTest
  # for specific test method, suffix $2 with #testMethodName
  mvn test -pl $1 -Dtest=$2
}
packc() {
  vim /Users/acheong/src/etc/chat-gpt-4-folder-to-text/folder-to-text.py
}
pack() {
  UNIQUE=$(date +"%s")
  FILENAME="/var/tmp/pack-$UNIQUE"
  pyenv local 3.12.4
  python3 /Users/acheong/src/etc/chat-gpt-4-folder-to-text/folder-to-text.py . "$FILENAME"
  FILESIZE=$(du -h "$FILENAME.txt" | awk '{ print $1 }')
  echo ""
  echo "Created $FILENAME.txt. Size: $FILESIZE. Copy to clipboard by pressing any key..."
  read
  echo ""
  cat "$FILENAME.txt" | pbcopy
}
pack_experiments() {
  UNIQUE=$(date +"%s")
  DIRNAME="/var/tmp/pack-dir-$UNIQUE"
  mkdir -p "$DIRNAME"
  cd /Users/acheong/src/spotify-nvim/ads-api/
  find . -type f -iname "*experiment*" -print | grep -v target | grep -v ".git" | grep -v AdSet | grep -v Audience | xargs -I {} cp {} "$DIRNAME"
  find . -type f -iname "*surveyquestion*" -print | grep -v target | grep -v ".git" | xargs -I {} cp {} "$DIRNAME"
  find . -type f -iname "*surveyoption*" -print | grep -v target | grep -v ".git" | xargs -I {} cp {} "$DIRNAME"
  cd "$DIRNAME"
  pack
}
alias seed 'cp ~/custom-seed-data.sql ~/src/spotify/ads-api/ads-api-data-model/src/main/resources/liquibase/local-changesets/20250502_094750__seed_local_dev_data_for_sbl.sql'

co() {
    codeowners=$(github-codeowners audit)
    files=$(git diff --name-only --diff-filter M origin/master...HEAD)
    temp_file=$(mktemp)
    while IFS= read -r file; do
        owners=$(echo "$codeowners" | awk -v file="$file" '
            $1 !~ /^#/ {
                pattern=$1
                $1=""
                if (file ~ "^" pattern) {
                    print $0
                    exit
                }
            }
        ' | xargs)
        if [ -z "$owners" ]; then
            owners=$(echo "$codeowners" | awk '$1 == "*" {$1=""; print $0; exit}' | xargs)
        fi
        sorted_owners=$(echo "$owners" | tr ' ' '\n' | sort | tr '\n' ' ' | sed 's/ $//')
        echo "${sorted_owners}:${file}" >> "$temp_file"
    done <<< "$files"
    sort "$temp_file" > "${temp_file}.sorted"
    awk -F: '
    BEGIN {
        FS = ":"
        current_owners = ""
    }
    {
        if ($1 != current_owners) {
            if (current_owners != "") {
                print ""
            }
            print "Code review required by anyone in " $1 ":"
            current_owners = $1
        }
        print "  " $2
    }' "${temp_file}.sorted"
    rm "$temp_file" "${temp_file}.sorted"
}

alias myrc='nvim ~/.myrc ; source ~/.myrc'
alias sourcemyrc='source ~/.myrc'
alias catmyrc='cat ~/.myrc'

alias h='history'
alias hg='history | grep'
alias ll='ls -alohF'
alias lt='ls -lt | head -n 10'

alias gworktree='echo "git worktree add (-b <new-branch> <../worktree-<name>|<../worktree-<name> <existing-branch>)"'
alias gl='git log --pretty=format:"%h %an %ar - %s" | head -n 10'
alias gac='git add . ; git commit'
alias gacnvm='git add . ; git commit --no-verify -m"fix: fix"'
alias gm='git checkout "$(git symbolic-ref refs/remotes/origin/HEAD | cut -d'/' -f4)"'
alias g-='git checkout -'
alias gwip='git add . ; git diff --staged ; git commit --no-verify -m"wip"'
alias gfmt='git add . ; git diff --staged ; git commit --no-verify -m"fix: formatting"'
alias gd='git diff'
alias gs='git status'
alias gdrop='git checkout --' # as opposed to stashing, supply argument "." for all or specific files
alias guncommit='git reset --soft HEAD~1'
alias gmabort='git merge --abort'
alias gunstage='git restore --staged .'
alias gbranches='git fetch ; git branch -v -a'
# Creates a local branch from a remote branch listed via `gbranches`. Don't include "remotes/origin/".
alias gswitch='git switch'
# https://stackoverflow.com/a/44529712/925913
gb() {
    git for-each-ref --sort=-committerdate refs/heads --format='%(authordate:short) %(color:red)%(objectname:short) %(color:yellow)%(refname:short)%(color:reset) (%(color:green)%(committerdate:relative)%(color:reset))' | head -n 10
}
alias glog='git log --pretty=format:"%h | %ad | %s" --date=format:"%a %b %d" --abbrev-commit'
gwd() { open "https://github.com/$1/$2/compare/$3...$4"; }
crdf() { gcr slackwing darkfeather $1 $2 }
gcr() {
  # Usage:
  #   gwebdiff <owner> <repo> <base> <head>
  # or (inside a git repo with origin on GitHub):
  #   gwebdiff <base> <head>

  local opener="xdg-open"; command -v open >/dev/null && opener="open"

  local owner_repo base head
  if [ $# -eq 4 ]; then
    owner_repo="$1/$2"; base="$3"; head="$4"
  elif [ $# -eq 2 ]; then
    owner_repo=$(git remote get-url origin 2>/dev/null | sed -E 's#(git@|https://)github.com[:/]|\.git$##g') || {
      echo "Not in a Git repo and no owner/repo provided" >&2; return 1; }
    base="$1"; head="$2"
  else
    echo "Usage: gwebdiff <owner> <repo> <base> <head>  |  gwebdiff <base> <head>" >&2
    return 1
  fi

  # Ensure correct BASE...HEAD order when thereâ€™s ancestry
  if git merge-base --is-ancestor "$base" "$head"; then
    :
  elif git merge-base --is-ancestor "$head" "$base"; then
    local tmp="$base"; base="$head"; head="$tmp"
  fi

  local url="https://github.com/$owner_repo/compare/$base...$head"
  local issues_url="https://github.com/$owner_repo/issues/new"

  # Cross-platform date formatter (macOS/BSD uses -r, GNU uses -d)
  _datefmt () {
    local fmt="$1" epoch="$2"
    if date -r "$epoch" +"$fmt" >/dev/null 2>&1; then
      date -r "$epoch" +"$fmt"
    else
      date -d "@$epoch" +"$fmt"
    fi
  }

  # Review date (e.g., "Fri, Sep 12, 2025")
  local review_date
  review_date=$(date +"%a, %b %d, %Y")

  # Range epochs
  local start_epoch end_epoch
  start_epoch=$(git log --pretty=%at "$base..$head" 2>/dev/null | sort -n | head -1)
  end_epoch=$(git log --pretty=%at "$base..$head" 2>/dev/null | sort -n | tail -1)

  # Build the range string per your rules
  local commits_date_range="(no commits)"
  if [ -n "$start_epoch" ] && [ -n "$end_epoch" ]; then
    # Components for comparisons
    local sy sm ey em
    sy=$(_datefmt "%Y" "$start_epoch")
    sm=$(_datefmt "%m" "$start_epoch")
    ey=$(_datefmt "%Y" "$end_epoch")
    em=$(_datefmt "%m" "$end_epoch")

    if [ "$sy" != "$ey" ]; then
      # Different years: full on both
      commits_date_range="$(_datefmt "%a, %b %d, %Y" "$start_epoch") - $(_datefmt "%a, %b %d, %Y" "$end_epoch")"
    elif [ "$sm" != "$em" ]; then
      # Same year, different month: weekday on start, month+day on both (you had year on end)
      commits_date_range="$(_datefmt "%a, %b %d" "$start_epoch") - $(_datefmt "%b %d, %Y" "$end_epoch")"
    else
      # Same month: weekday + month+day on start, day only on end (you had year on end)
      commits_date_range="$(_datefmt "%a, %b %d" "$start_epoch")-$(_datefmt "%d, %Y" "$end_epoch")"
    fi
  fi

  # HTML-escape helper
  _html_escape () {
    sed -e 's/&/\&amp;/g' -e 's/</\&lt;/g' -e 's/>/\&gt;/g'
  }

  # Commit list: "<hash> | Fri, Sep 12, 2025 | subject>", joined with <br/>
  local commits_html
  commits_html=$(git log --pretty=format:'%h | %ad | %s' --date=format:'%a, %b %d, %Y' "$base..$head" \
    | _html_escape \
    | sed -e 's/$/<br\/>/' )
  [ -z "$commits_html" ] && commits_html="(no commits in range)"

  # Open the compare page
  "$opener" "$url" >/dev/null 2>&1 &

  # Open the new issues page
  "$opener" "$issues_url" >/dev/null 2>&1 &

  local html
  html=$(cat <<EOF
### Code Review
<table>
  <tr>
    <th>Date of Review</th>
    <td>$review_date</td>
  </tr>
  <tr>
    <th>Date of Commits</th>
    <td>$commits_date_range</td>
  </tr>
  <tr>
    <th>Commits</th>
    <td>$commits_html</td>
  </tr>
  <tr>
    <th>URL</th>
    <td><a href="$url">$url</a></td>
  </tr>
</table>
EOF
)

  # Copy to clipboard (pbcopy, wl-copy, xclip, xsel, or clip.exe)
  if command -v pbcopy >/dev/null 2>&1; then
    printf "%s\n" "$html" | pbcopy
  elif command -v wl-copy >/dev/null 2>&1; then
    printf "%s\n" "$html" | wl-copy
  elif command -v xclip >/dev/null 2>&1; then
    printf "%s\n" "$html" | xclip -selection clipboard
  elif command -v xsel >/dev/null 2>&1; then
    printf "%s\n" "$html" | xsel --clipboard --input
  elif command -v clip.exe >/dev/null 2>&1; then
    printf "%s\n" "$html" | clip.exe
  fi

  # Also print to stdout
  printf "%s\n" "$html"
}




alias b64d='base64 --decode'
alias b64e='base64 --encode'

alias fmt='mvn com.spotify.fmt:fmt-maven-plugin:format'

# Website: Server-side operations

  alias acssh='ssh -i ~/.ssh/id_rsa_gcp_acheong87 acheong87@35.243.192.242'
  alias acstop='gcloud compute instances stop andrew-cheong-com-vm'
  alias acstart='gcloud compute instances start andrew-cheong-com-vm'

# Website: Local development

  # Navigating to the main repository, a worktree, or another relative path.
  alias feathers='echo "WARN: Leaving any worktree!\n"; cd /Users/acheong/src/slackwing/feathers/'
  worktree() {
      cd "/Users/acheong/src/slackwing/worktree-$1"
  }
  alias worktrees='ls -d /Users/acheong/src/slackwing/worktree-* | xargs -n 1 basename | sort'

  # Navigating to relative subpaths.
  alias html="cd foundry/website/html/"

  # Global shortcuts.
  alias journal="worktree journal ; html"
  alias stereoscopic="worktree stereoscopic-plots ; html"

  # Updating the server (safely).
  currentDirIs() {
    current_dir_name=$(basename "$PWD")
    if [[ "$current_dir_name" == "$1" ]]; then
        return 0
    else
        return 1
    fi
  }
  acrsync() {
    if [[ $# -lt 2 ]]; then
      echo "Error: Less than 2 arguments supplied." >&2
      return 1
    fi
    if currentDirIs "html"; then
      echo "\nUploading $PWD/$1 to <remote>/$2 ...\n"
      rsync -avOc $1 "acheong87@35.243.192.242:/var/www/html/$2"
    else
      echo "Invalid directory: $PWD"
    fi
  }

  # Convenience.
  alias acprod='acrsync . .'
  alias acstage='acrsync . .staging/'
  alias acsj='acrsync journal/ .staging/journal/'
  alias acsfg='acstage ; fg'
  alias acjfg='acsj ; fg'
  alias acpj='acrsync journal/ journal/'

# Website: To Be Organized

  acpub() {
      echo "\nExecuting dry run...\n"
      rsync -avOn /Users/acheong/src/slackwing/feathers/foundry/website/html/ acheong87@35.243.192.242:/var/www/html/
      echo "\nPress any key to continue, or ^C to exit.\n"
      read -s -n 1
      echo "\nPublishing...\n"
      rsync -avO /Users/acheong/src/slackwing/feathers/foundry/website/html/ acheong87@35.243.192.242:/var/www/html/
  }
  acpubdir() {
      echo "\nExecuting dry run...\n"
      rsync -avOn /Users/acheong/src/slackwing/feathers/foundry/website/html/$1 acheong87@35.243.192.242:/var/www/html/$1
      echo "\nPress any key to continue, or ^C to exit.\n"
      read -s -n 1
      echo "\nPublishing...\n"
      rsync -avO /Users/acheong/src/slackwing/feathers/foundry/website/html/$1 acheong87@35.243.192.242:/var/www/html/$1
  }
  acgit() {
      cd /Users/acheong/src/slackwing/feathers/foundry/website/html/
      git status
      read -s -n 1
      git diff
      read -s -n 1
      git add .
      git commit -m"acgit on $(date '+%Y-%m-%d %H:%M:%S')"
      git push
  }

# alias acwww='open -a "Google Chrome" https://andrewcheong.com/~andre305/'
# alias acwwwbyip='open -a "Google Chrome" http://209.182.199.238/~andre305/'
# alias cpanel='open -a "Google Chrome" https://andrewcheong.com/cpanel/'
# alias cpanelbyip='open -a "Google Chrome" http://209.182.199.238/cpanel/'
# alias cpanel_help='echo andre305 \$xxfxxTxx000'

alias jazz0='mpv "https://www.youtube.com/watch?v=IRyJe-0Uie0" -vo null'
alias jazz1='mpv "https://www.youtube.com/watch?v=e-2TaN77gD4" -vo null'
alias jazz1v='mpv "https://www.youtube.com/watch?v=e-2TaN77gD4" -vo tct'
alias jazz2='mpv "https://www.youtube.com/watch?v=8cN7LWGO-gE" -vo null'
alias hack0='mpv "https://www.youtube.com/watch?v=mW304P9EHgg" -vo null'
alias hack0v='mpv "https://www.youtube.com/watch?v=mW304P9EHgg" -vo tct'
alias rain0='mpv "https://www.youtube.com/watch?v=DXT9dF-WK-I" -vo null'
alias rain0v='mpv "https://www.youtube.com/watch?v=DXT9dF-WK-I" -vo tct'
alias late0='mpv "https://www.youtube.com/watch?v=QYpDQxHfTPk" -vo null'
alias late0v='mpv "https://www.youtube.com/watch?v=QYpDQxHfTPk" -vo tct'
alias lofi0='mpv "https://www.youtube.com/watch?v=HU_6C9b5i6k" -vo null'
alias lofi0v='mpv "https://www.youtube.com/watch?v=HU_6C9b5i6k" -vo tct'
function gamba() { termdown -c 20 -v Yuna $((60*$1)) }

function sandbox() {
  echo "git checkout sandbox"
  echo "git merge --no-ff (master|origin/acheong-patch-4|acheong/fix-something)"
  echo "git push -f origin sandbox"
}

# Experimental aliases; promote when commonly relied on.
# alias buildadsapi="mvn generate-sources ; mvn clean compile install package -DskipTests"
alias runapilocal="export DATAMODEL_DATASOURCE_PASSWORD=postgres; export SPRING_CLOUD_GCP_SQL_ENABLED=false; mvn spring-boot:run -Plocal"
alias runapisandbox="export SPRING_CLOUD_GCP_SQL_ENABLED=true; mvn spring-boot:run -Plocal"
alias runapidebug='export DATAMODEL_DATASOURCE_PASSWORD=postgres; export SPRING_CLOUD_GCP_SQL_ENABLED=false; mvn spring-boot:run -Plocal -Dspring-boot.run.jvmArguments="-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005"'
alias debuginfo='echo "Run > Edit Configurations, +, Remote JVM Debug, localhost:5005"'
alias buildcs="mvn clean package -DskipTests; mvn package -DskipTests"
alias rk="sudo pkill karabiner_console_user_server"
alias crypto='cd ~/src/slackwing/feathers/05\ -\ X1_2'
alias build='/Applications/CLion.app/Contents/bin/cmake/mac/bin/cmake --build cmake-build-debug --target 05___X1_2'
alias adsproxy='~/src/spotify/cloud-sql-proxy --port 5432 spotify-ads-api:europe-west1:ads-api-data-model-sandbox'
alias amsproxy='~/src/spotify/cloud-sql-proxy --port 3501 ad-selfserve:us-east1:measurementsdb adstudio-sandbox1:us-east1:measurementsdb-sandbox'
alias aasproxy='~/src/spotify/cloud-sql-proxy --port 3401 ad-selfserve:us-central1:adaccountdb adstudio-sandbox1:us-central1:adaccountdb-sandbox'
# alias amsproxy='~/src/spotify/cloud_sql_proxy -instances=ad-selfserve:us-east1:measurementsdb=tcp:3501,adstudio-sandbox1:us-east1:measurementsdb-sandbox=tcp:3502'
alias beamproxy='~/src/spotify/cloud_sql_proxy -instances=ad-selfserve:us-central1:beamdb=tcp:3601,adstudio-sandbox1:us-central1:beamdb-sandbox=tcp:3602'
alias draftsproxy='~/src/spotify/cloud_sql_proxy -instances=ad-selfserve:europe-west1:adstudio-draftsdb=tcp:3403,adstudio-sandbox1:europe-west1:adstudio-drafts-sandboxdb=tcp:3404'
alias csproxy='~/src/spotify/cloud-sql-proxy --port 5432 spotify-ad-serving:europe-west1:campaign-service-sandbox'
alias csproxyprodreplica='~/src/spotify/cloud-sql-proxy --port 6432 spotify-ad-serving:europe-west1:campaign-replica-gew1'
alias gcloudreset='gcloud auth application-default login'
alias gcloudapi='gcloud auth application-default login; gcloud auth application-default set-quota-project spotify-ads-api'
alias gcloudaudprod='gcloud auth application-default login --impersonate-service-account audience-manager-namespace@gke-accounts.iam.gserviceaccount.com'
alias gcloudaudsand='gcloud auth application-default login --impersonate-service-account audience-manager-namespace-box@gke-accounts.iam.gserviceaccount.com'
alias audproxyprod='~/src/spotify/cloud-sql-proxy --auto-iam-authn --impersonate-service-account=audience-manager-namespace@gke-accounts.iam.gserviceaccount.com spotify-audience-manager:us-central1:audience-manager-sql --port 5442'
alias audproxysand='~/src/spotify/cloud-sql-proxy --auto-iam-authn --impersonate-service-account=audience-manager-namespace-box@gke-accounts.iam.gserviceaccount.com spotify-audience-manager:us-central1:audience-manager-sql-sandbox --port 5443'
alias usherproxysand='~/src/spotify/cloud-sql-proxy --port 5533 spotify-ad-serving:europe-west1:usher-sandbox'
alias abletonlog='tail -f ~/Library/Preferences/Ableton/Live\ 11.0.12/Log.txt'
alias lint='yarn lint:js --fix'
alias core='cd /Users/acheong/src/spotify/client-web/desktop/shell/core'
alias coreaudio='cd /Users/acheong/src/spotify/client-web/desktop/shell/core/spotify/audio/playback/cpp/src'
alias corebuild='cd /Users/acheong/src/spotify/client-web/desktop/shell/build'
alias hack_build='corebuild; xcodebuild -project spotify.xcodeproj -target Spotify -configuration Debug'
alias hack_run='corebuild; ./desktop/Debug/Spotify.app/Contents/MacOS/Spotify'
alias hack_run_logf='hack_run 2>&1 | grep acheong:hack'
summon() {
    echo ''
    if [ $# -eq 0 ]; then
        echo 'usage: summon <# of test users (default: 1)> <prefix (default: "spuser")> <country (default: "us")>'
        echo ''
        echo 'anyway, creating a single test user for you...'
        echo ''
    fi
    for i in {1..${1:-1}}
    do
        curl --no-progress-meter -d "{\"prefix\": \"${2:-spuser}\", \"country\": \"${3:-us}\", \"username\": \"${2:-spuser}\", \"name\": \"${2:-spuser}\", \"receiveEmail\": false}" http://foreigner.services.gew1.spotify.net/user/v2/create | jq --raw-output .username
    done
}
invoice() {
    echo ''
    if [ $# -eq 0 ]; then
        echo 'usage: invoice <ad account id>'
        echo ''
        echo 'hint: you can grab an ad account id from the url (after /account/)'
        echo ''
    else
        echo -e "{\"adAccountId\": \"$1\"}" | jhurl hm://adsgtm/internal/v1/ad-account/invoice -s services.guc3 -X POST
        echo ''
        echo "check for errors ^ and don't forget to hard-refresh the app!"
    fi
}
name2id() {
   echo "{\"username\": \"$1\"}" | jhurl --authenticate --service-account 'adstudio-bff-sandbox@gke-accounts.iam.gserviceaccount.com' -s services.gew1 -X GET -p hm://userdata/attributes  | jq .
}
id2name() {
   echo "{\"user_id\": \"$1\"}" | jhurl --authenticate --service-account 'adstudio-bff-sandbox@gke-accounts.iam.gserviceaccount.com' -s services.gew1 -X GET -p hm://userdata/attributes  | jq .
}
email2name() {
   echo "{\"email\": \"$1\"}" | jhurl --authenticate --service-account 'adstudio-bff-sandbox@gke-accounts.iam.gserviceaccount.com' -s services.gew1 -X GET -p hm://userdata/attributes | jq .
}
#id2name() {
#    jhurl -s services.guc3 "hm://userdata/account?user_id=$1" --service-account 'adstudio-bff-sandbox@gke-accounts.iam.gserviceaccount.com' -p </dev/null | jq -r '.[0].username'
#}
#name2id() {
#    jhurl -s services.guc3 "hm://userdata/account?username=$1" --service-account 'adstudio-bff-sandbox@gke-accounts.iam.gserviceaccount.com' -p </dev/null | jq -r '.[0].user_id'
#}
clone() {
    git clone git@ghe.spotify.net:ads/$1.git
}
killall() {
    ps -ef | grep $1 | awk '{print $2}' | xargs sudo kill -9
}

# Doesn't really work because sometimes "(managed)" is not on the last line.
alias mvn-conflicts='mvn dependency:analyze | tee ~/tmp | sed "s/^.* <-- //" | sort -h | uniq'

alias kcontexts='kubectl config get-contexts'
alias kdeps='k get deployments'
kiam() {
    echo "--context=$KCONTEXT --namespace=$KNAMESPACE"
}
ghe() {
    service=$1
    if [ "$1" = "aas" ]; then
        service=ad-account-service
    fi
    if [ "$1" = "bff" ]; then
        service=adstudio-bff
    fi
    open -a "Google Chrome" https://ghe.spotify.net/ads/$service/pulls
}

#
# some of andrew's alias; try then modify/rename/delete as it suits you
#
khelp() {
    echo ''
    echo 'Real-time logs for services on Kubernetes:'
    echo ''
    echo ' 1. ktail <service>'
    echo ''
    echo '    (If not working, check that you are on the VPN, and also run `kauth`.)'
    echo ''
    echo 'Work with kubectl more easily, e.g. to open a shell into a pod:'
    echo ''
    echo ' 1. run `backstage <service>`, go to Active Versions, click icon next to desired cluster'
    echo ' 2. run `kswitch <context> <service>`; now alias `k` is ready to use'
    echo ' 3. run `kpods` to get pods'
    echo ' 4. run `kshell <number>` to open a terminal into the <number>th pod'
    echo ''
}
function kauth() {
    gcloud container clusters list \
        --project=gke-xpn-1 \
        --filter="resourceLabels[env]=production" \
        --format="value[delimiter=' '](name,zone)" \
        | xargs -n 2 sh -c 'gcloud container clusters get-credentials $1 --region=$2 --project=gke-xpn-1' sh;
}
function ktail {
    klogs $1 --follow
}
backstage() {
    service=$1
    if [ "$1" = "aas" ]; then
        service=ad-account-service
    fi
    if [ "$1" = "bff" ]; then
        service=adstudio-bff
    fi
    if [ "$1" = "voltron" ]; then
        service=voltron-ui-production
    fi
    open -a "Google Chrome" https://backstage.spotify.net/services/$service/deployment
}
kswitch() {
    KCONTEXT=$1
    KNAMESPACE=$2
    eval "k() { kubectl --context=$1 --namespace=$2 \$@ }"
}
alias kpods='k get pods'
kshell() {
    pod=$(k get pods | grep -v NAME | awk '{print $1}' | sed "$1q;d")
    echo "k exec --stdin --tty $pod -- /bin/bash"
    k exec --stdin --tty $pod -- /bin/bash
}
klogs() {
    pod=$(k get pods | grep -v NAME | awk '{print $1}' | sed "$1q;d")
    echo "k logs --follow $pod"
    k logs --follow $pod 
}
#
# other potentially useful aliases (create your own too!)
#
alias kdeployments='k get deployments'
ksecrets() {
    k get secret $1 -o yaml
}
kdescribe() {
    k describe pods
}

# PGP
alias gpglist='gpg --list-keys'
# Supply file containing public key of recipient.
alias gpgimport='gpg --import'
# Supply "real name" of imported recipient, and file to encrypt.
function gpgencrypt() {
    gpg --encrypt --armor --recipient $1 $2
}
# Supply file to decrypt; no reference to own private key necessary.
alias gpgdecrypt='gpg --decrypt'

function ksignups() {
    klogs ad-account-service --follow | grep -i "signUp\>" # "\>" is a word boundary, like "\b" in regex.
}

# Occasionally call these 2 to clean up remote branches.
gcleanuptest() {
    git branch -r | awk -Forigin/ '/\/acheong/{print $2}'
}
alias gcleanupeverything='gcleanuptest | xargs -I {} git push origin :{}'
alias gcleanupsomethings='gcleanuptest | grep PATTERN | grep -v PATTERN | xargs -I {} git push origin :{}'
# Try this next time to delete local branches that have been deleted remotely (above).
alias glocalcleanupsafe='git remote prune origin'
# If that doesn't work, resort to manually deleting each local branch:
alias glocalcleanuplist='git branch'
alias glocalcleanupmanual='git branch -d'

alias cc='mvn clean compile test-compile'
alias mi='mvn install -DskipTests'
alias mip='mvn install package -DskipTests'

# Unorgnized below this line.

test_token() {
    echo '{ "filters": {"iamDomains":[ "org/def7fbb4-41e3-4ca5-ba65-5da0ed49cc22/91506214-d4ba-456f-b1b3-d5f5cffce5ea" ] }}' | jhurl -XPOST -s services.guc3 "hm://campaign-service-sandbox/proto/CampaignService/v3/getFlights?json=true" --user-header "Accept=application/json" --user-header "Portcullis-Token=$1" -p
}
test_token2() {
    echo '{ "filters": {"iamDomains":[ "org/3b51719b-1568-4e6c-920f-4f94d9330841/9c938613-1993-46e2-8c88-37d74f2ca264" ] }}' | jhurl -XPOST -s services.guc3 "hm://campaign-service-sandbox/proto/CampaignService/v3/getFlights?json=true" --user-header "Accept=application/json" --user-header "Portcullis-Token=$1" -p
}
alias gpg="/usr/local/gnupg-2.2/bin/gpg"
alias yay="xargs printf '%b\n'"
alias s='vim ~/.sed'
alias silt='sed -f ~/.sed'
alias siff='git diff `git merge-base master HEAD`'
alias mdaw='mvn dependency:analyze | tee /dev/tty | wc'
alias pretty='tail -n 1 | sed s/[\\]x0a//g | sed s/^..// | sed s/..$// | python -m json.tool'
alias ungrpc='tail -n 1 | sed s/[\\]x0a//g | sed s/^..// | sed s/..$//'
alias lg='grpcurl -plaintext localhost:5990'
alias killforti="ps -ef | grep -i forticlient | awk '{print $2}' | xargs sudo kill -9"
alias clientsrc='cd ~/hack/2021/client-web/node_modules/open/web-player/src'
yo() {
    $@ 2>&1 | gsed 's/\\n/\n/g' | gsed 's/\\t/\t/g'
}
partner() {
    jhurl --site services.gew1 --method GET "hm://partner-userid/encrypted/adstudio-salesforce/$1"
}
killp() {
    ps -ef | grep -i $1 | awk {'print $2'} | xargs sudo kill -9
}
mbdiff() {
    git diff `git merge-base master $1`..$1
}

# holy hell this is an amazing function! check out anyone's pr by number! e.g. `copr 123`
copr() { git fetch origin "refs/pull/$1/head:acheong/$1" && git checkout "acheong/$1"; }
checkoutpr() { git fetch origin "refs/pull/$1/head:pr/$1" && git checkout "pr/$1"; }

filestamp() { echo $(date "+%Y%m%d-%H:%M:%S"); }

tdlogs() {
    source ~/src/dev-workflow/env/profile-utils.sh;
    mkdir -p ~/blackstar/;
    dlogs | tee ~/blackstar/dlogs-`filestamp`;
}

ddlogsraw() {
    diff <(sed 's/[0-9]//g' `ls -t ~/blackstar/dlogs-* | head -n 2 | tail -n 1`) <(sed 's/[0-9]//g' `ls -t ~/blackstar/dlogs-* | head -n 1`) 
}
ddlogs() {
    diff <(sed 's/[0-9]//g' `ls -t ~/blackstar/dlogs-* | head -n 2 | tail -n 1` | sort | uniq) <(sed 's/[0-9]//g' `ls -t ~/blackstar/dlogs-* | head -n 1` | sort | uniq) 
}
mtree() {
    mkdir -p ~/blackstar/;
    mvn dependency:tree | grep '^\[INFO\] [|+]' | tee ~/blackstar/mtree-`filestamp`;
}
dmtree() {
    vimdiff <(sed 's/^\[INFO\] [^a-zA-Z]*//g' `ls -t ~/blackstar/mtree-* | head -n 2 | tail -n 1`) <(sed 's/^\[INFO\] [^a-zA-Z]*//g' `ls -t ~/blackstar/mtree-* | head -n 1`)
}
# brew install tree
ftree() {
    mkdir -p ~/blackstar/;
    tree | tee ~/blackstar/ftree-`filestamp`;
}
dftree() {
    vimdiff `ls -t ~/blackstar/ftree-* | head -n 2 | tail -n 1` `ls -t ~/blackstar/ftree-* | head -n 1`
}
mda() {
    mkdir -p ~/blackstar/;
    mvn dependency:analyze | tee ~/blackstar/mda-`filestamp`;
}
dmda() {
    vimdiff `ls -t ~/blackstar/mda-* | head -n 2 | tail -n 1` `ls -t ~/blackstar/mda-* | head -n 1`
}
ldlogs() {
    cat `ls -t ~/blackstar/dlogs-* | head -n 1`
}
lmtree() {
    cat `ls -t ~/blackstar/mtree-* | head -n 1`
}
lftree() {
    cat `ls -t ~/blackstar/ftree-* | head -n 1`
}
lmda() {
    cat `ls -t ~/blackstar/mda-* | head -n 1`
}
alias neat="sed 's/^\[INFO\][ \t]*//g' | sed 's/^\[WARNING\][ \t]*//g' | sed 's/^\[ERROR\][ \t]*//g'"
alias 2xml="sed 's/\([a-zA-Z][a-zA-Z0-9.-]*\):\([a-zA-Z0-9.-]*\):jar:\([0-9][a-zA-Z0-9.-]*\)\(:\([a-z]*\)\)*/<dependency><groupId>\1<\/groupId><artifactId>\2<\/artifactId><\/dependency>/g'"
alias 2xmlv="sed 's/\([a-zA-Z][a-zA-Z0-9.-]*\):\([a-zA-Z0-9.-]*\):jar:\([0-9][a-zA-Z0-9.-]*\)\(:\([a-z]*\)\)*/<dependency><groupId>\1<\/groupId><artifactId>\2<\/artifactId><version>\3<\/version><scope>\5<\/scope><\/dependency>/g'"

# smartling
smartling() {
    mvn clean compile test-compile
    # todo - detect which directory has the i18n files
    read -n 1 -p "press any key to continue with \`cd adstudio-bff-common\'" asdf
    cd adstudio-bff-common
    read -n 1 -p "press any key to continue with the smartling stuff" asdf
    mvn exec:java -Dexec.mainClass=com.spotify.i18n.smartling.v1.SmartlingTool -Dexec.classpathScope=test -Dexec.args="sync"
}

createsurvey() {
    curl -s localhost:8080/ads-local/v3/ad_accounts/5c39191d-96f9-434d-b183-c11165557fc4/experiments \
  -d '{"ad_account_id": "5c39191d-96f9-434d-b183-c11165557fc4", "type": "SURVEY", "name": "Test Survey", "start_date": "2024-10-01T00:00:00Z", "end_date": "2024-10-18T00:00:00Z", "eligibility_campaign_ids": ["01234567-f20f-4720-9708-caac0ba42726"], "is_test": true, "market": "US", "holdout_level": "AD_ACCOUNT_LEVEL", "holdout_percent": 10, "survey_questions": [{"question_type": "MULTI_SELECT", "question_text": "Which of these guitar brands have you heard of?", "secondary_text": "Select all that apply.", "randomize_options": true, "language": "en/US", "options": [{"option_text": "Abasi", "is_exclusive": false, "is_last": false}, {"option_text": "Strandberg", "is_exclusive": false, "is_last": false}, {"option_text": "Aristedes", "is_exclusive": false, "is_last": false}, {"option_text": "Kiesel", "is_exclusive": false, "is_last": false}, {"option_text": "None of the above", "is_exclusive": true, "is_last": true}]}]}'\
        -H "x-spotify-clientid: test-client-id1" \
        -H "x-spotify-userid: 8bda6e38c97642869bc7ef0150780331" \
        -H "x-spotify-adaccountid: 5c39191d-96f9-434d-b183-c11165557fc4" \
        -H "Content-Type: application/json"
}

getsurvey() {
    curl -s localhost:8080/ads-local/v3/ad_accounts/5c39191d-96f9-434d-b183-c11165557fc4/experiments/$1 \
        -H "x-spotify-clientid: test-client-id1" \
        -H "x-spotify-userid: 8bda6e38c97642869bc7ef0150780331" \
        -H "x-spotify-adaccountid: 5c39191d-96f9-434d-b183-c11165557fc4" \
        -H "Content-Type: application/json"
}





